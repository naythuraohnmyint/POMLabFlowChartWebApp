/*
 * jQuery UI Multi-Progress Bar 1.0
 * http://github.com/j-ulrich/jquery-ui-multiprogressbar
 *
 * Copyright (c) 2012 Jochen Ulrich <jochenulrich@t-online.de>
 * Licensed under the MIT license (MIT-LICENSE.txt).
 */

(function ($) {
    $.widget("ui.multiprogressbar", {

        // Options
        options: {
            parts: [{ value: 0, barClass: "", text: false, textClass: "" }]
        },

        _create: function () {
            var self = this;
            self.element.progressbar({ value: 0, disabled: self.options.disabled }); // Creates one part with width 0%
            self.element.addClass("ui-multiprogressbar");

            // Use the part generated by jQuery UI progressbar as template for the other parts
            self._partTemplate = self._getPartElements().outerHTML();
            self._createParts(self.options.parts);
        },

        _getPartElements: function () {
            return this.element.children(".ui-progressbar-value");
        },

        _createParts: function (parts) {
            var self = this;

            self._getPartElements().remove(); // Remove all existing parts and then rebuild them
            var first = true;
            var lastVisibleElement = null;
            var totalValue = 0;
            jQuery.each(parts, function (i, part) {
                var partElement = $(self._partTemplate).appendTo(self.element);

                if (first === false) {
                    partElement.removeClass("ui-corner-left");
                }
                if (part.value > 0 && totalValue < 100) {
                    first = false;
                    // Check if the part would exceed the 100% and cut it at 100%
                    part.value = totalValue + part.value > 100 ? 100 - totalValue : part.value;
                    partElement.css('width', part.value + "%").show();
                    lastVisibleElement = partElement;
                    totalValue += part.value;
                }
                else {
                    // Hide part if the progress is <= 0 or if we exceeded 100% already 
                    part.value = 0;
                    partElement.hide();
                }

                partElement.addClass(part.barClass);

                if (part.text !== undefined && part.text !== null && part.text !== false) {
                    var textForPart;
                    if (part.text === true) {
                        textForPart = Math.floor(part.value) + "%";
                    }
                    else if (jQuery.trim(part.text) !== "") {
                        textForPart = part.text;
                    }
                    $('<div></div>').addClass("ui-multiprogressbar-valuetext").text(textForPart).addClass(part.textClass).appendTo(partElement);
                }
            });
            if (totalValue >= 99.9) {
                lastVisibleElement.addClass("ui-corner-right");
                // Trigger complete
                self._trigger("complete", null, self.element);
            }
            self._trigger("change", null, self.element);
        },

        destroy: function () {
            var self = this;
            self._getPartElements().remove();
            self.element.progressbar("destroy");
        },

        _setOption: function (option, value) {
            var self = this;
            $.Widget.prototype._setOption.apply(self, arguments);

            switch (option) {
                case "parts":
                    self._createParts(value);
                    break;
            }
        },

        /**
		 * @return {Numeric} the sum of the progress of all visible parts.
		 * <b>Note:</b> When the sum of the progress of the parts exceeds 100, the progress
		 * will be truncated at 100 and the value of successive parts will be set to 0. This means
		 * that this function will always return a value in the range [0,100].
		 */
        total: function () {
            var self = this;
            var totalValue = 0;
            jQuery.each(self.options.parts, function (i, part) {
                totalValue += part.value;
            });

            return totalValue;
        }
    });
}(jQuery));